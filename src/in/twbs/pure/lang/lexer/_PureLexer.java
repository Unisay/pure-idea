/* The following code was generated by JFlex 1.4.3 on 7/4/14 1:47 AM */

package in.twbs.pure.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static in.twbs.pure.lang.psi.PureTokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/4/14 1:47 AM from the specification file
 * <tt>pure.flex</tt>
 */
class _PureLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\20\1\21\1\56\1\20\2\21\16\20\4\0\1\1\1\2\1\25"+
    "\3\2\1\23\1\6\1\105\1\106\2\2\1\104\1\54\1\103\1\2"+
    "\1\111\1\50\1\50\1\50\1\50\3\17\2\10\1\2\1\0\1\2"+
    "\1\101\1\102\2\2\1\45\1\26\1\34\1\47\1\37\1\33\1\41"+
    "\1\30\1\36\1\14\1\46\1\32\1\40\1\43\1\16\1\36\1\44"+
    "\1\35\1\27\1\31\1\42\1\30\1\14\1\12\1\51\1\14\1\107"+
    "\1\22\1\110\1\52\1\4\1\0\1\60\1\24\1\74\1\57\1\64"+
    "\1\65\1\70\1\77\1\67\2\13\1\73\1\72\1\71\1\15\1\63"+
    "\1\13\1\66\1\75\1\61\1\76\1\24\1\100\1\11\1\62\1\13"+
    "\1\53\1\2\1\55\1\2\53\0\1\3\12\0\1\3\4\0\1\3"+
    "\5\0\27\7\1\0\7\7\30\3\1\0\10\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\2\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\2\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\2\7\1\3\1\7\1\3\1\7"+
    "\3\3\2\7\1\3\1\7\1\3\2\7\1\3\3\7\2\3\4\7"+
    "\1\3\2\7\1\3\3\7\3\3\2\7\1\3\2\7\1\3\1\7"+
    "\1\3\1\7\1\3\2\7\1\3\1\7\2\3\1\7\1\3\2\7"+
    "\1\3\3\7\1\3\1\7\1\3\2\7\2\3\1\5\1\7\3\3"+
    "\4\5\1\7\1\5\1\3\1\7\1\5\1\3\1\7\1\5\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\2\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\2\3\1\7\1\5\1\3\1\7\1\3\3\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\4\3\31\0"+
    "\140\3\22\5\4\0\14\5\16\0\5\5\11\0\1\5\213\0\1\5"+
    "\13\0\1\7\1\0\3\7\1\0\1\7\1\0\2\7\1\3\21\7"+
    "\1\0\11\7\43\3\1\0\2\3\3\7\3\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\5\3\1\7\1\3\1\0\1\7\1\3\2\7\1\3\4\0\60\7"+
    "\60\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\10\0\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\2\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\0\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\2\0\1\7\1\3\6\0\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\41\0\46\7\2\0\1\5\7\0\47\3\110\0"+
    "\33\5\5\0\3\5\56\0\32\5\5\0\13\5\25\0\12\5\4\0"+
    "\2\5\1\0\143\5\1\0\1\5\17\0\2\5\7\0\2\5\12\5"+
    "\3\5\2\0\1\5\20\0\1\5\1\0\36\5\35\0\3\5\60\0"+
    "\46\5\13\0\1\5\u0152\0\66\5\3\0\1\5\22\0\1\5\7\0"+
    "\12\5\4\0\12\5\25\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\1\5\3\0\4\5\3\0\1\5\36\0\2\5\1\0"+
    "\3\5\4\0\12\5\2\5\23\0\6\5\4\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\37\0\4\5"+
    "\1\0\1\5\7\0\12\5\2\0\3\5\20\0\11\5\1\0\3\5"+
    "\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0\1\5"+
    "\22\0\1\5\17\0\2\5\4\0\12\5\25\0\10\5\2\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0\1\5"+
    "\36\0\2\5\1\0\3\5\4\0\12\5\1\0\1\5\21\0\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5"+
    "\1\0\2\5\3\0\2\5\3\0\3\5\3\0\10\5\1\0\3\5"+
    "\55\0\11\5\25\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\46\0\2\5\4\0\12\5\25\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\12\5\1\0\5\5\3\0\1\5\40\0\1\5"+
    "\1\0\2\5\4\0\12\5\25\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\20\5\46\0\2\5\4\0\12\5\25\0\22\5\3\0\30\5"+
    "\1\0\11\5\1\0\1\5\2\0\7\5\72\0\60\5\1\0\2\5"+
    "\14\0\7\5\11\0\12\5\47\0\2\5\1\0\1\5\2\0\2\5"+
    "\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5"+
    "\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\0\2\5"+
    "\11\0\1\5\2\0\5\5\1\0\1\5\11\0\12\5\2\0\2\5"+
    "\42\0\1\5\37\0\12\5\26\0\10\5\1\0\42\5\35\0\4\5"+
    "\164\0\42\5\1\0\5\5\1\0\2\5\25\0\12\5\6\0\6\5"+
    "\112\0\46\7\12\0\51\5\7\0\132\5\5\0\104\5\5\0\122\5"+
    "\6\0\7\5\1\0\77\5\1\0\1\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\47\5\1\0\1\5\1\0\4\5"+
    "\2\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\7\5\1\0\27\5\1\0\37\5"+
    "\1\0\1\5\1\0\4\5\2\0\7\5\1\0\47\5\1\0\23\5"+
    "\16\0\11\5\56\0\125\5\14\0\u026c\5\2\0\10\5\12\0\32\5"+
    "\5\0\113\5\25\0\15\5\1\0\4\5\16\0\22\5\16\0\22\5"+
    "\16\0\15\5\1\0\3\5\17\0\64\5\43\0\1\5\4\0\1\5"+
    "\3\0\12\5\46\0\12\5\6\0\130\5\10\0\51\5\127\0\35\5"+
    "\51\0\12\5\36\5\2\0\5\5\u038b\0\54\3\66\5\12\3\224\0"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\7\3"+
    "\4\0\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\6\0\10\3\10\7\6\3\2\0\6\7\2\0\10\3\10\7"+
    "\10\3\10\7\6\3\2\0\6\7\2\0\10\3\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\10\3\10\7\16\3\2\0\10\3"+
    "\10\5\10\3\10\5\10\3\10\5\5\3\1\0\2\3\4\7\1\5"+
    "\1\0\1\3\3\0\3\3\1\0\2\3\4\7\1\5\3\0\4\3"+
    "\2\0\2\3\4\7\4\0\10\3\5\7\5\0\3\3\1\0\2\3"+
    "\4\7\1\5\164\0\1\3\15\0\1\3\202\0\1\7\4\0\1\7"+
    "\2\0\1\3\3\7\2\3\3\7\1\3\1\0\1\7\3\0\5\7"+
    "\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\1\3"+
    "\2\7\1\0\1\7\1\3\4\5\1\3\3\0\1\3\2\7\5\0"+
    "\1\7\4\3\u0ebb\0\2\5\52\0\5\5\5\0\2\5\4\0\126\5"+
    "\6\0\3\5\1\0\132\5\1\0\4\5\5\0\50\5\4\0\136\5"+
    "\21\0\30\5\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5"+
    "\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0\73\5\225\0\7\3\14\0\5\3"+
    "\5\0\1\5\1\0\12\5\1\0\15\5\1\0\5\5\1\0\1\5"+
    "\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5"+
    "\2\0\66\5\50\0\14\5\164\0\5\5\1\0\207\5\23\0\12\5"+
    "\7\0\32\7\6\0\32\3\13\0\131\5\3\0\6\5\2\0\6\5"+
    "\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\1\1\10\1\3\1\11\11\4\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\6\3\21\1\22"+
    "\1\0\1\23\1\24\1\25\1\26\1\27\7\4\1\30"+
    "\1\31\6\4\1\32\2\0\1\33\1\34\17\0\13\4"+
    "\1\35\3\4\2\6\12\0\1\36\1\37\1\40\1\41"+
    "\1\42\6\4\1\43\3\4\1\44\1\45\3\4\1\46"+
    "\1\47\1\4\1\50\1\51\1\4\1\52\1\53\1\54"+
    "\1\4\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\224\0\336\0\u0128\0\u0172\0\u01bc"+
    "\0\u0206\0\336\0\u0250\0\u029a\0\u02e4\0\224\0\u032e\0\u0378"+
    "\0\u03c2\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8"+
    "\0\336\0\224\0\224\0\224\0\224\0\224\0\u0612\0\224"+
    "\0\u065c\0\u06a6\0\u0128\0\u06f0\0\224\0\224\0\u073a\0\336"+
    "\0\u0128\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940"+
    "\0\u0128\0\u098a\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46"+
    "\0\336\0\u0b90\0\u0bda\0\224\0\224\0\u0c24\0\u0c6e\0\u0cb8"+
    "\0\u0d02\0\u0d4c\0\u0d96\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08"+
    "\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158"+
    "\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u0128"+
    "\0\u13a8\0\u13f2\0\u143c\0\u0b90\0\u0bda\0\u1486\0\u14d0\0\u151a"+
    "\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720\0\u0128"+
    "\0\u0128\0\u0128\0\u0128\0\u0128\0\u176a\0\u17b4\0\u17fe\0\u1848"+
    "\0\u1892\0\u18dc\0\u0128\0\u1926\0\u1970\0\u19ba\0\u0128\0\u1a04"+
    "\0\u1a4e\0\u1a98\0\u1ae2\0\u0128\0\u0128\0\u1b2c\0\u0128\0\u0128"+
    "\0\u1b76\0\u0128\0\u0128\0\u0128\0\u1bc0\0\u0128";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int ZZ_TRANS [] = {
    2, 3, 4, 5, 5, 2, 2, 6, 7, 5, 
    6, 5, 6, 8, 6, 7, 2, 3, 9, 4, 
    5, 10, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    7, 6, 4, 11, 12, 13, 3, 14, 5, 15, 
    5, 5, 16, 17, 5, 18, 5, 5, 19, 20, 
    21, 5, 5, 5, 22, 23, 4, 24, 25, 26, 
    27, 28, 29, 30, 31, 31, 31, 31, 31, 31, 
    31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
    31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
    31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
    31, 31, 31, 31, 31, 31, 31, 32, 33, 31, 
    31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
    31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
    31, 31, 31, 31, 31, 31, 31, 31, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 4, -1, 4, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, 6, -1, 6, -1, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, -1, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, -1, -1, -1, -1, -1, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, -1, -1, -1, -1, -1, 
    -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, -1, -1, -1, -1, -1, -1, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 34, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, -1, -1, 
    35, 10, 10, 36, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, -1, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    37, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, -1, 38, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 4, 39, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 40, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 41, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, 42, 5, 
    5, 5, 43, 5, 5, 5, 5, 5, 5, 5, 
    5, 44, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 45, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 46, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 47, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 48, 5, 5, 5, 49, 50, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 51, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, 5, 5, 
    52, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    53, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 54, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 55, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, -1, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 4, 56, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 57, 57, -1, -1, 58, 58, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, 
    -1, -1, 10, -1, 10, 62, -1, -1, -1, 63, 
    -1, 10, -1, 61, 10, 10, 10, 10, 64, 65, 
    66, -1, 67, 68, 69, 70, -1, 71, -1, 70, 
    70, 72, -1, 73, -1, 74, 10, -1, 75, -1, 
    -1, -1, 61, -1, 10, 10, -1, -1, -1, 10, 
    10, -1, -1, 10, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
    38, 38, 38, 38, 38, 38, -1, 38, 38, 38, 
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
    38, 38, 38, 38, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 76, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, 5, 77, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 78, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, 5, 5, 79, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 80, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 81, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 82, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 83, 5, 5, 5, 5, 
    5, 5, 5, 84, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, 5, 85, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 86, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 87, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 88, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    89, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, 5, 5, 90, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, -1, -1, -1, -1, -1, 91, 91, 
    91, 91, 91, 91, 91, 91, -1, -1, -1, -1, 
    91, -1, 91, 91, 91, 91, 91, 91, 91, 91, 
    91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
    91, 91, -1, -1, -1, -1, -1, 91, 91, 91, 
    91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
    91, 91, 91, 91, 91, -1, -1, -1, -1, -1, 
    -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 92, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 92, -1, 61, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 61, 10, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    10, 10, 10, 10, 10, 10, 10, 10, -1, -1, 
    -1, -1, 10, -1, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, -1, -1, -1, -1, -1, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
    -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, 
    -1, 93, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, 
    -1, -1, -1, -1, 10, -1, -1, -1, 95, -1, 
    -1, -1, -1, -1, -1, 96, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 
    -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 
    -1, -1, -1, -1, -1, -1, -1, 96, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, 
    -1, 97, -1, 98, -1, -1, -1, -1, -1, -1, 
    10, -1, -1, 99, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 93, -1, -1, 100, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 100, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 101, -1, 102, -1, 
    -1, 93, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 10, -1, -1, 10, -1, 10, -1, 10, -1, 
    -1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, -1, 10, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 103, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, 5, 5, 104, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, 5, 5, 105, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 106, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 5, 5, 5, 107, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, 5, 5, 
    108, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 109, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 110, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 111, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 112, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    113, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, 5, 5, 114, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 115, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 116, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 117, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, 5, 5, 
    118, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 119, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 120, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 121, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 122, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 123, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, 5, 5, 124, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 125, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 126, 5, 5, 5, 5, 127, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 128, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 129, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, -1, -1, -1, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, 5, 5, 130, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 131, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    132, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, -1, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 5, 5, 5, 133, 5, 5, 5, 
    5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, 
  };

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\11\1\1\11\13\1\5\11\1\1\1\11"+
    "\3\1\1\0\2\11\23\1\2\0\2\11\17\0\21\1"+
    "\12\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

   int comment_nesting = 0;
   int yyline = 0;
   int yycolumn = 0;


  _PureLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PureLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2830) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
return;


    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL.charAt(zzCurrentPosL)) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return IF;
          }
        case 46: break;
        case 6: 
          { return NATURAL;
          }
        case 47: break;
        case 45: 
          { return INSTANCE;
          }
        case 48: break;
        case 22: 
          { return ARROW;
          }
        case 49: break;
        case 2: 
          { return WS;
          }
        case 50: break;
        case 41: 
          { return INFIXL;
          }
        case 51: break;
        case 15: 
          { return LBRACK;
          }
        case 52: break;
        case 16: 
          { return RBRACK;
          }
        case 53: break;
        case 40: 
          { return INFIXR;
          }
        case 54: break;
        case 8: 
          { return LCURLY;
          }
        case 55: break;
        case 9: 
          { return RCURLY;
          }
        case 56: break;
        case 31: 
          { return TYPE;
          }
        case 57: break;
        case 36: 
          { return FALSE;
          }
        case 58: break;
        case 18: 
          { return OF;
          }
        case 59: break;
        case 21: 
          { return SLCOMMENT;
          }
        case 60: break;
        case 26: 
          { return DARROW;
          }
        case 61: break;
        case 12: 
          { return COMMA;
          }
        case 62: break;
        case 11: 
          { return DOT;
          }
        case 63: break;
        case 25: 
          { return IN;
          }
        case 64: break;
        case 39: 
          { return WHERE;
          }
        case 65: break;
        case 42: 
          { return IMPORT;
          }
        case 66: break;
        case 5: 
          { return PROPER_IDENT;
          }
        case 67: break;
        case 28: 
          { comment_nesting--; if (comment_nesting == 0) { yybegin(YYINITIAL); return MLCOMMENT; }
          }
        case 68: break;
        case 7: 
          { return DBACKSLASH;
          }
        case 69: break;
        case 3: 
          { return OPERATOR;
          }
        case 70: break;
        case 20: 
          { yybegin(COMMENT); comment_nesting = 1;
          }
        case 71: break;
        case 33: 
          { return THEN;
          }
        case 72: break;
        case 23: 
          { return DO;
          }
        case 73: break;
        case 30: 
          { return DATA;
          }
        case 74: break;
        case 38: 
          { return CLASS;
          }
        case 75: break;
        case 34: 
          { return ELSE;
          }
        case 76: break;
        case 35: 
          { return CASE;
          }
        case 77: break;
        case 44: 
          { return FOREIGN;
          }
        case 78: break;
        case 37: 
          { return INFIX;
          }
        case 79: break;
        case 29: 
          { return LET;
          }
        case 80: break;
        case 19: 
          { return STRING;
          }
        case 81: break;
        case 1: 
          { return ERROR;
          }
        case 82: break;
        case 32: 
          { return TRUE;
          }
        case 83: break;
        case 13: 
          { return LPAREN;
          }
        case 84: break;
        case 4: 
          { return IDENT;
          }
        case 85: break;
        case 14: 
          { return RPAREN;
          }
        case 86: break;
        case 43: 
          { return MODULE;
          }
        case 87: break;
        case 10: 
          { return EQ;
          }
        case 88: break;
        case 27: 
          { comment_nesting++;
          }
        case 89: break;
        case 17: 
          { 
          }
        case 90: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMMENT: {
              return MLCOMMENT;
            }
            case 135: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
