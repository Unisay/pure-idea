/* The following code was generated by JFlex 1.4.3 on 7/11/14 3:16 AM */

package in.twbs.pure.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static in.twbs.pure.lang.psi.PureTokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/11/14 3:16 AM from the specification file
 * <tt>pure.flex</tt>
 */
class _PureLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRINGS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\20\1\21\1\62\1\20\2\21\15\20\5\0\1\1\1\2\1\31"+
    "\3\2\1\27\1\6\1\113\1\114\1\2\1\26\1\112\1\60\1\23"+
    "\1\2\1\117\1\54\1\54\1\54\1\54\3\17\2\10\1\107\1\106"+
    "\1\2\1\104\1\105\2\2\1\51\1\32\1\41\1\53\1\25\1\37"+
    "\1\45\1\34\1\43\1\14\1\52\1\36\1\44\1\47\1\16\1\43"+
    "\1\50\1\42\1\33\1\35\1\46\1\40\1\14\1\12\1\55\1\14"+
    "\1\115\1\22\1\116\1\56\1\4\1\110\1\64\1\30\1\77\1\63"+
    "\1\24\1\70\1\73\1\102\1\72\2\13\1\76\1\75\1\74\1\15"+
    "\1\67\1\13\1\71\1\100\1\65\1\101\1\30\1\103\1\11\1\66"+
    "\1\13\1\57\1\111\1\61\1\2\53\0\1\3\12\0\1\3\4\0"+
    "\1\3\5\0\27\7\1\0\7\7\30\3\1\0\10\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\2\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\2\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\2\7\1\3\1\7\1\3"+
    "\1\7\3\3\2\7\1\3\1\7\1\3\2\7\1\3\3\7\2\3"+
    "\4\7\1\3\2\7\1\3\3\7\3\3\2\7\1\3\2\7\1\3"+
    "\1\7\1\3\1\7\1\3\2\7\1\3\1\7\2\3\1\7\1\3"+
    "\2\7\1\3\3\7\1\3\1\7\1\3\2\7\2\3\1\5\1\7"+
    "\3\3\4\5\1\7\1\5\1\3\1\7\1\5\1\3\1\7\1\5"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\2\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\2\3\1\7\1\5\1\3\1\7\1\3"+
    "\3\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\4\3"+
    "\31\0\140\3\22\5\4\0\14\5\16\0\5\5\11\0\1\5\213\0"+
    "\1\5\13\0\1\7\1\0\3\7\1\0\1\7\1\0\2\7\1\3"+
    "\21\7\1\0\11\7\43\3\1\0\2\3\3\7\3\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\5\3\1\7\1\3\1\0\1\7\1\3\2\7\1\3\4\0"+
    "\60\7\60\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\10\0\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\2\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\0\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\2\0\1\7\1\3\6\0\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\41\0\46\7\2\0\1\5\7\0\47\3"+
    "\110\0\33\5\5\0\3\5\56\0\32\5\5\0\13\5\25\0\12\5"+
    "\4\0\2\5\1\0\143\5\1\0\1\5\17\0\2\5\7\0\2\5"+
    "\12\5\3\5\2\0\1\5\20\0\1\5\1\0\36\5\35\0\3\5"+
    "\60\0\46\5\13\0\1\5\u0152\0\66\5\3\0\1\5\22\0\1\5"+
    "\7\0\12\5\4\0\12\5\25\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\1\5\3\0\4\5\3\0\1\5\36\0\2\5"+
    "\1\0\3\5\4\0\12\5\2\5\23\0\6\5\4\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\37\0"+
    "\4\5\1\0\1\5\7\0\12\5\2\0\3\5\20\0\11\5\1\0"+
    "\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0"+
    "\1\5\22\0\1\5\17\0\2\5\4\0\12\5\25\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0"+
    "\1\5\36\0\2\5\1\0\3\5\4\0\12\5\1\0\1\5\21\0"+
    "\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\10\5\1\0"+
    "\3\5\55\0\11\5\25\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\46\0\2\5\4\0\12\5\25\0\10\5\1\0"+
    "\3\5\1\0\27\5\1\0\12\5\1\0\5\5\3\0\1\5\40\0"+
    "\1\5\1\0\2\5\4\0\12\5\25\0\10\5\1\0\3\5\1\0"+
    "\27\5\1\0\20\5\46\0\2\5\4\0\12\5\25\0\22\5\3\0"+
    "\30\5\1\0\11\5\1\0\1\5\2\0\7\5\72\0\60\5\1\0"+
    "\2\5\14\0\7\5\11\0\12\5\47\0\2\5\1\0\1\5\2\0"+
    "\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0"+
    "\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\0"+
    "\2\5\11\0\1\5\2\0\5\5\1\0\1\5\11\0\12\5\2\0"+
    "\2\5\42\0\1\5\37\0\12\5\26\0\10\5\1\0\42\5\35\0"+
    "\4\5\164\0\42\5\1\0\5\5\1\0\2\5\25\0\12\5\6\0"+
    "\6\5\112\0\46\7\12\0\51\5\7\0\132\5\5\0\104\5\5\0"+
    "\122\5\6\0\7\5\1\0\77\5\1\0\1\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\47\5\1\0\1\5\1\0"+
    "\4\5\2\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0"+
    "\1\5\1\0\4\5\2\0\7\5\1\0\7\5\1\0\27\5\1\0"+
    "\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\47\5\1\0"+
    "\23\5\16\0\11\5\56\0\125\5\14\0\u026c\5\2\0\10\5\12\0"+
    "\32\5\5\0\113\5\25\0\15\5\1\0\4\5\16\0\22\5\16\0"+
    "\22\5\16\0\15\5\1\0\3\5\17\0\64\5\43\0\1\5\4\0"+
    "\1\5\3\0\12\5\46\0\12\5\6\0\130\5\10\0\51\5\127\0"+
    "\35\5\51\0\12\5\36\5\2\0\5\5\u038b\0\54\3\66\5\12\3"+
    "\224\0\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\7\3\4\0\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\6\0\10\3\10\7\6\3\2\0\6\7\2\0\10\3"+
    "\10\7\10\3\10\7\6\3\2\0\6\7\2\0\10\3\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\10\3\10\7\16\3\2\0"+
    "\10\3\10\5\10\3\10\5\10\3\10\5\5\3\1\0\2\3\4\7"+
    "\1\5\1\0\1\3\3\0\3\3\1\0\2\3\4\7\1\5\3\0"+
    "\4\3\2\0\2\3\4\7\4\0\10\3\5\7\5\0\3\3\1\0"+
    "\2\3\4\7\1\5\164\0\1\3\15\0\1\3\202\0\1\7\4\0"+
    "\1\7\2\0\1\3\3\7\2\3\3\7\1\3\1\0\1\7\3\0"+
    "\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\3\2\7\1\0\1\7\1\3\4\5\1\3\3\0\1\3\2\7"+
    "\5\0\1\7\4\3\u0ebb\0\2\5\52\0\5\5\5\0\2\5\4\0"+
    "\126\5\6\0\3\5\1\0\132\5\1\0\4\5\5\0\50\5\4\0"+
    "\136\5\21\0\30\5\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5\132\0"+
    "\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0\73\5\225\0\7\3\14\0"+
    "\5\3\5\0\1\5\1\0\12\5\1\0\15\5\1\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0"+
    "\100\5\2\0\66\5\50\0\14\5\164\0\5\5\1\0\207\5\23\0"+
    "\12\5\7\0\32\7\6\0\32\3\13\0\131\5\3\0\6\5\2\0"+
    "\6\5\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\4\1\11\1\12\1\3\1\13\10\4"+
    "\1\14\1\15\1\3\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\6\3\25\1\26\1\27\1\30\2\0"+
    "\1\31\1\32\1\4\1\33\1\34\1\35\1\36\6\4"+
    "\1\37\1\40\6\4\1\41\1\42\2\0\1\43\1\44"+
    "\1\0\2\45\3\0\1\46\13\0\2\47\1\0\13\4"+
    "\1\50\3\4\2\6\2\45\4\0\1\45\6\0\1\51"+
    "\1\52\1\53\1\54\1\55\7\4\1\56\4\4\1\57"+
    "\1\60\3\4\1\61\1\62\1\4\1\63\1\64\1\65"+
    "\1\4\1\66\1\67\1\70\1\4\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0190\0\u0320\0\u0370\0\360\0\u03c0\0\u0410"+
    "\0\360\0\u0460\0\u04b0\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640"+
    "\0\u0690\0\u06e0\0\360\0\u0730\0\360\0\u0190\0\360\0\360"+
    "\0\360\0\360\0\360\0\u0780\0\360\0\u07d0\0\u0820\0\360"+
    "\0\u0870\0\360\0\u08c0\0\u0910\0\u01e0\0\u0190\0\u0960\0\360"+
    "\0\u09b0\0\u0190\0\u01e0\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u0b40"+
    "\0\u0b90\0\u01e0\0\u0be0\0\u0c30\0\u0c80\0\u0cd0\0\u0d20\0\u0d70"+
    "\0\u0dc0\0\u0190\0\u0190\0\u0e10\0\u0e60\0\360\0\360\0\u0eb0"+
    "\0\360\0\u0f00\0\u0f50\0\u0fa0\0\u0ff0\0\360\0\u1040\0\u1090"+
    "\0\u10e0\0\u1130\0\u1180\0\u11d0\0\u1220\0\u1270\0\u12c0\0\u1310"+
    "\0\u1360\0\u13b0\0\u1400\0\u1400\0\u1450\0\u14a0\0\u14f0\0\u1540"+
    "\0\u1590\0\u15e0\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770\0\u01e0"+
    "\0\u17c0\0\u1810\0\u1860\0\u0e10\0\u0e60\0\u0f50\0\u0fa0\0\u18b0"+
    "\0\u1900\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30"+
    "\0\u1b80\0\u1bd0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u1c20"+
    "\0\u1c70\0\u1cc0\0\u1d10\0\u1d60\0\u1db0\0\u1e00\0\u01e0\0\u1e50"+
    "\0\u1ea0\0\u1ef0\0\u1f40\0\u01e0\0\u1f90\0\u1fe0\0\u2030\0\u2080"+
    "\0\u01e0\0\u01e0\0\u20d0\0\u01e0\0\u01e0\0\u01e0\0\u2120\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u2170\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int ZZ_TRANS [] = {
    3, 4, 5, 6, 6, 3, 3, 7, 8, 6, 
    7, 6, 7, 9, 7, 8, 3, 4, 10, 11, 
    12, 7, 5, 5, 6, 13, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 8, 7, 5, 14, 15, 16, 
    4, 17, 6, 18, 6, 6, 19, 6, 20, 6, 
    6, 21, 22, 23, 6, 6, 6, 24, 25, 5, 
    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
    36, 36, 36, 36, 36, 36, 36, 37, 38, 36, 
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 39, 3, 3, 40, 39, 
    39, 39, 39, 39, 39, 41, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    3, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 5, -1, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    -1, 5, -1, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 7, -1, 7, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    7, 7, -1, -1, 7, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 
    -1, -1, -1, -1, -1, 8, -1, -1, -1, 42, 
    43, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 44, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 45, 
    -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 5, -1, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    -1, 5, -1, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 46, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 5, -1, 48, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 49, 
    -1, 5, -1, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 50, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 51, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 52, 6, 6, 53, 6, 6, 
    6, 6, 6, 6, 6, 6, 54, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 55, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 56, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 57, 6, 6, 6, 
    58, 59, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 60, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    61, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 62, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 63, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 64, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 5, -1, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 65, 
    -1, 5, -1, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 5, -1, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    -1, 66, -1, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 8, 67, 
    67, -1, -1, 68, 68, 8, -1, -1, -1, 42, 
    43, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 71, -1, -1, -1, -1, 72, -1, 73, 74, 
    -1, -1, -1, 75, -1, 73, -1, 71, 72, -1, 
    -1, 76, -1, 77, 72, 72, 78, 79, 80, -1, 
    81, 82, 80, 83, 84, -1, -1, 84, 84, 85, 
    -1, 86, -1, 87, 73, -1, 88, -1, -1, -1, 
    71, -1, 72, 72, -1, -1, 72, 72, -1, -1, 
    72, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 
    -1, -1, -1, -1, -1, -1, -1, -1, 89, -1, 
    -1, -1, -1, -1, -1, 89, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 89, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, 
    -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, 
    -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, 
    -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 90, -1, -1, -1, 91, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 92, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    -1, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 93, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 94, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 95, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    96, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 97, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 98, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 99, 6, 6, 6, 
    6, 6, 6, 6, 100, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 101, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 102, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 103, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 104, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 105, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    106, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, -1, -1, -1, -1, -1, 107, 107, 
    107, 107, 107, 107, 107, 107, -1, -1, -1, -1, 
    107, 107, -1, -1, 107, -1, 107, 107, 107, 107, 
    107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 
    107, 107, 107, 107, 107, 107, -1, -1, -1, -1, 
    -1, 107, 107, 107, 107, 107, 107, 107, 107, 107, 
    107, 107, 107, 107, 107, 107, 107, 107, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 107, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 
    -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 71, 77, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    71, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, 
    -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 
    -1, -1, -1, -1, -1, -1, -1, -1, 109, 109, 
    109, 109, 109, 109, 109, 109, -1, -1, -1, -1, 
    109, 109, -1, -1, 109, -1, 109, 109, 109, 109, 
    109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
    109, 109, 109, 109, 109, 109, -1, -1, -1, -1, 
    -1, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
    109, 109, 109, 109, 109, 109, 109, 109, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 109, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 110, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 110, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 111, -1, 112, 
    -1, -1, -1, -1, -1, -1, 72, -1, -1, 113, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 114, -1, -1, -1, -1, -1, 72, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 115, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 116, 
    -1, -1, -1, -1, -1, 72, -1, -1, 117, -1, 
    -1, -1, -1, -1, -1, 118, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, 
    -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, 
    -1, 118, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 114, -1, 
    -1, 119, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 119, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 114, -1, -1, -1, -1, -1, -1, -1, -1, 
    120, -1, -1, 121, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, 
    72, -1, 72, -1, 72, -1, -1, -1, -1, -1, 
    -1, 72, -1, -1, -1, -1, 72, 72, 72, 72, 
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 
    72, 72, 72, 72, -1, 72, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 89, -1, 
    -1, -1, -1, -1, -1, 89, -1, -1, -1, -1, 
    43, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 89, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, 
    -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, 
    -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    122, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 123, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    124, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    125, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    126, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    127, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 128, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 129, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 130, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 131, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 132, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 133, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    134, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 135, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 136, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    72, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    72, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    72, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    72, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 137, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 138, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    139, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 140, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 141, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 142, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 143, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 144, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    145, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 146, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 147, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 148, 6, 6, 
    6, 6, 149, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    150, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 151, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    152, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    153, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    6, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 154, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
    -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    155, 6, -1, -1, 6, -1, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 
    -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
  };

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\11\1\1\11\2\1\1\11\11\1\1\11"+
    "\1\1\1\11\1\1\5\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\2\0\3\1\1\11\23\1\2\0\2\11"+
    "\1\0\1\11\1\1\3\0\1\11\13\0\2\1\1\0"+
    "\23\1\4\0\1\1\6\0\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   int comment_nesting = 0;
   int yyline = 0;
   int yycolumn = 0;


  _PureLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PureLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2832) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
return;


    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { return IF;
          }
        case 58: break;
        case 27: 
          { yybegin(COMMENT); comment_nesting = 1; return MLCOMMENT;
          }
        case 59: break;
        case 6: 
          { return NATURAL;
          }
        case 60: break;
        case 21: 
          { return MLCOMMENT;
          }
        case 61: break;
        case 57: 
          { return INSTANCE;
          }
        case 62: break;
        case 38: 
          { return STRING_GAP;
          }
        case 63: break;
        case 29: 
          { return ARROW;
          }
        case 64: break;
        case 2: 
          { return WS;
          }
        case 65: break;
        case 7: 
          { return BACKSLASH;
          }
        case 66: break;
        case 53: 
          { return INFIXL;
          }
        case 67: break;
        case 9: 
          { yybegin(STRINGS); return STRING;
          }
        case 68: break;
        case 19: 
          { return LBRACK;
          }
        case 69: break;
        case 20: 
          { return RBRACK;
          }
        case 70: break;
        case 52: 
          { return INFIXR;
          }
        case 71: break;
        case 10: 
          { return LCURLY;
          }
        case 72: break;
        case 26: 
          { return DDOT;
          }
        case 73: break;
        case 14: 
          { return TICK;
          }
        case 74: break;
        case 43: 
          { return TYPE;
          }
        case 75: break;
        case 11: 
          { return RCURLY;
          }
        case 76: break;
        case 47: 
          { return FALSE;
          }
        case 77: break;
        case 25: 
          { return OF;
          }
        case 78: break;
        case 28: 
          { return SLCOMMENT;
          }
        case 79: break;
        case 33: 
          { return DARROW;
          }
        case 80: break;
        case 16: 
          { return COMMA;
          }
        case 81: break;
        case 8: 
          { return DOT;
          }
        case 82: break;
        case 32: 
          { return IN;
          }
        case 83: break;
        case 13: 
          { return SEMI;
          }
        case 84: break;
        case 50: 
          { return WHERE;
          }
        case 85: break;
        case 54: 
          { return IMPORT;
          }
        case 86: break;
        case 23: 
          { return STRING_ERROR;
          }
        case 87: break;
        case 37: 
          { return STRING_ESCAPED;
          }
        case 88: break;
        case 51: 
          { return FORALL;
          }
        case 89: break;
        case 24: 
          { yybegin(YYINITIAL); return STRING;
          }
        case 90: break;
        case 5: 
          { return PROPER_NAME;
          }
        case 91: break;
        case 3: 
          { return OPERATOR;
          }
        case 92: break;
        case 45: 
          { return THEN;
          }
        case 93: break;
        case 30: 
          { return DO;
          }
        case 94: break;
        case 42: 
          { return DATA;
          }
        case 95: break;
        case 35: 
          { comment_nesting++; return MLCOMMENT;
          }
        case 96: break;
        case 49: 
          { return CLASS;
          }
        case 97: break;
        case 34: 
          { return DCOLON;
          }
        case 98: break;
        case 41: 
          { return ELSE;
          }
        case 99: break;
        case 39: 
          { return FLOAT;
          }
        case 100: break;
        case 46: 
          { return CASE;
          }
        case 101: break;
        case 56: 
          { return FOREIGN;
          }
        case 102: break;
        case 48: 
          { return INFIX;
          }
        case 103: break;
        case 40: 
          { return LET;
          }
        case 104: break;
        case 22: 
          { return STRING;
          }
        case 105: break;
        case 15: 
          { return PIPE;
          }
        case 106: break;
        case 1: 
          { return ERROR;
          }
        case 107: break;
        case 44: 
          { return TRUE;
          }
        case 108: break;
        case 17: 
          { return LPAREN;
          }
        case 109: break;
        case 4: 
          { return IDENT;
          }
        case 110: break;
        case 36: 
          { comment_nesting--; if (comment_nesting == 0) yybegin(YYINITIAL); return MLCOMMENT;
          }
        case 111: break;
        case 18: 
          { return RPAREN;
          }
        case 112: break;
        case 55: 
          { return MODULE;
          }
        case 113: break;
        case 12: 
          { return EQ;
          }
        case 114: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
